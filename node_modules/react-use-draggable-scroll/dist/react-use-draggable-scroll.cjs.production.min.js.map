{"version":3,"file":"react-use-draggable-scroll.cjs.production.min.js","sources":["../src/useIsomorphicLayoutEffect.ts","../src/index.tsx"],"sourcesContent":["import { useLayoutEffect, useEffect } from 'react';\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default useIsomorphicLayoutEffect;\n","import { MutableRefObject, useEffect, useRef } from \"react\";\n\nimport useLayoutEffect from \"./useIsomorphicLayoutEffect\";\n\ntype OptionsType = {\n  decayRate?: number;\n  safeDisplacement?: number;\n  applyRubberBandEffect?: boolean;\n  activeMouseButton?: \"Left\" | \"Middle\" | \"Right\";\n  isMounted?: boolean;\n};\n\ntype ReturnType = {\n  events: {\n    onMouseDown: (e: React.MouseEvent<HTMLElement>) => void;\n  };\n};\n\nexport function useDraggable(\n  ref: MutableRefObject<HTMLElement>,\n  {\n    decayRate = 0.95,\n    safeDisplacement = 10,\n    applyRubberBandEffect = false,\n    activeMouseButton = \"Left\",\n    isMounted = true,\n  }: OptionsType = {}\n): ReturnType {\n  const internalState = useRef({\n    isMouseDown: false,\n    isDraggingX: false,\n    isDraggingY: false,\n    initialMouseX: 0,\n    initialMouseY: 0,\n    lastMouseX: 0,\n    lastMouseY: 0,\n    scrollSpeedX: 0,\n    scrollSpeedY: 0,\n    lastScrollX: 0,\n    lastScrollY: 0,\n  });\n\n  let isScrollableAlongX = false;\n  let isScrollableAlongY = false;\n  let maxHorizontalScroll = 0;\n  let maxVerticalScroll = 0;\n  let cursorStyleOfWrapperElement: string;\n  let cursorStyleOfChildElements: string[];\n  let transformStyleOfChildElements: string[];\n  let transitionStyleOfChildElements: string[];\n\n  const timing = (1 / 60) * 1000; // period of most monitors (60fps)\n\n  useLayoutEffect(() => {\n    if (isMounted) {\n      isScrollableAlongX =\n        window.getComputedStyle(ref.current).overflowX === \"scroll\";\n      isScrollableAlongY =\n        window.getComputedStyle(ref.current).overflowY === \"scroll\";\n\n      maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth;\n      maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight;\n\n      cursorStyleOfWrapperElement = window.getComputedStyle(ref.current).cursor;\n\n      cursorStyleOfChildElements = [];\n      transformStyleOfChildElements = [];\n      transitionStyleOfChildElements = [];\n\n      (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n        (child: HTMLElement) => {\n          cursorStyleOfChildElements.push(\n            window.getComputedStyle(child).cursor\n          );\n\n          transformStyleOfChildElements.push(\n            window.getComputedStyle(child).transform === \"none\"\n              ? \"\"\n              : window.getComputedStyle(child).transform\n          );\n\n          transitionStyleOfChildElements.push(\n            window.getComputedStyle(child).transition === \"none\"\n              ? \"\"\n              : window.getComputedStyle(child).transition\n          );\n        }\n      );\n    }\n  }, [isMounted]);\n\n  const runScroll = () => {\n    const dx = internalState.current.scrollSpeedX * timing;\n    const dy = internalState.current.scrollSpeedY * timing;\n    const offsetX = ref.current.scrollLeft + dx;\n    const offsetY = ref.current.scrollTop + dy;\n\n    ref.current.scrollLeft = offsetX; // eslint-disable-line no-param-reassign\n    ref.current.scrollTop = offsetY; // eslint-disable-line no-param-reassign\n    internalState.current.lastScrollX = offsetX;\n    internalState.current.lastScrollY = offsetY;\n  };\n\n  const rubberBandCallback = (e: MouseEvent) => {\n    const dx = e.clientX - internalState.current.initialMouseX;\n    const dy = e.clientY - internalState.current.initialMouseY;\n\n    const { clientWidth, clientHeight } = ref.current;\n\n    let displacementX = 0;\n    let displacementY = 0;\n\n    if (isScrollableAlongX && isScrollableAlongY) {\n      displacementX =\n        0.3 *\n        clientWidth *\n        Math.sign(dx) *\n        Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth);\n      displacementY =\n        0.3 *\n        clientHeight *\n        Math.sign(dy) *\n        Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight);\n    } else if (isScrollableAlongX) {\n      displacementX =\n        0.3 *\n        clientWidth *\n        Math.sign(dx) *\n        Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth);\n    } else if (isScrollableAlongY) {\n      displacementY =\n        0.3 *\n        clientHeight *\n        Math.sign(dy) *\n        Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight);\n    }\n\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement) => {\n        child.style.transform = `translate3d(${displacementX}px, ${displacementY}px, 0px)`; // eslint-disable-line no-param-reassign\n        child.style.transition = \"transform 0ms\"; // eslint-disable-line no-param-reassign\n      }\n    );\n  };\n\n  const recoverChildStyle = () => {\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement, i) => {\n        child.style.transform = transformStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n        child.style.transition = transitionStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n      }\n    );\n  };\n\n  let rubberBandAnimationTimer: NodeJS.Timeout;\n  let keepMovingX: NodeJS.Timer;\n  let keepMovingY: NodeJS.Timer;\n\n  const callbackMomentum = () => {\n    const minimumSpeedToTriggerMomentum = 0.05;\n\n    keepMovingX = setInterval(() => {\n      const lastScrollSpeedX = internalState.current.scrollSpeedX;\n      const newScrollSpeedX = lastScrollSpeedX * decayRate;\n      internalState.current.scrollSpeedX = newScrollSpeedX;\n\n      const isAtLeft = ref.current.scrollLeft <= 0;\n      const isAtRight = ref.current.scrollLeft >= maxHorizontalScroll;\n      const hasReachedHorizontalEdges = isAtLeft || isAtRight;\n\n      runScroll();\n\n      if (\n        Math.abs(newScrollSpeedX) < minimumSpeedToTriggerMomentum ||\n        internalState.current.isMouseDown ||\n        hasReachedHorizontalEdges\n      ) {\n        internalState.current.scrollSpeedX = 0;\n        clearInterval(keepMovingX);\n      }\n    }, timing);\n\n    keepMovingY = setInterval(() => {\n      const lastScrollSpeedY = internalState.current.scrollSpeedY;\n      const newScrollSpeedY = lastScrollSpeedY * decayRate;\n      internalState.current.scrollSpeedY = newScrollSpeedY;\n\n      const isAtTop = ref.current.scrollTop <= 0;\n      const isAtBottom = ref.current.scrollTop >= maxVerticalScroll;\n      const hasReachedVerticalEdges = isAtTop || isAtBottom;\n\n      runScroll();\n\n      if (\n        Math.abs(newScrollSpeedY) < minimumSpeedToTriggerMomentum ||\n        internalState.current.isMouseDown ||\n        hasReachedVerticalEdges\n      ) {\n        internalState.current.scrollSpeedY = 0;\n        clearInterval(keepMovingY);\n      }\n    }, timing);\n\n    internalState.current.isDraggingX = false;\n    internalState.current.isDraggingY = false;\n\n    if (applyRubberBandEffect) {\n      const transitionDurationInMilliseconds = 250;\n\n      (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n        (child: HTMLElement) => {\n          child.style.transform = `translate3d(0px, 0px, 0px)`; // eslint-disable-line no-param-reassign\n          child.style.transition = `transform ${transitionDurationInMilliseconds}ms`; // eslint-disable-line no-param-reassign\n        }\n      );\n\n      rubberBandAnimationTimer = setTimeout(\n        recoverChildStyle,\n        transitionDurationInMilliseconds\n      );\n    }\n  };\n\n  const preventClick = (e: Event) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    // e.stopPropagation();\n  };\n\n  const getIsMousePressActive = (buttonsCode: number) => {\n    return (\n      (activeMouseButton === \"Left\" && buttonsCode === 1) ||\n      (activeMouseButton === \"Middle\" && buttonsCode === 4) ||\n      (activeMouseButton === \"Right\" && buttonsCode === 2)\n    );\n  };\n\n  const onMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    const isMouseActive = getIsMousePressActive(e.buttons);\n    if (!isMouseActive) {\n      return;\n    }\n\n    internalState.current.isMouseDown = true;\n    internalState.current.lastMouseX = e.clientX;\n    internalState.current.lastMouseY = e.clientY;\n    internalState.current.initialMouseX = e.clientX;\n    internalState.current.initialMouseY = e.clientY;\n  };\n\n  const onMouseUp = (e: MouseEvent) => {\n    const isDragging =\n      internalState.current.isDraggingX || internalState.current.isDraggingY;\n\n    const dx = internalState.current.initialMouseX - e.clientX;\n    const dy = internalState.current.initialMouseY - e.clientY;\n\n    const isMotionIntentional =\n      Math.abs(dx) > safeDisplacement || Math.abs(dy) > safeDisplacement;\n\n    const isDraggingConfirmed = isDragging && isMotionIntentional;\n\n    if (isDraggingConfirmed) {\n      ref.current.childNodes.forEach((child) => {\n        child.addEventListener(\"click\", preventClick);\n      });\n    } else {\n      ref.current.childNodes.forEach((child) => {\n        child.removeEventListener(\"click\", preventClick);\n      });\n    }\n\n    internalState.current.isMouseDown = false;\n    internalState.current.lastMouseX = 0;\n    internalState.current.lastMouseY = 0;\n\n    ref.current.style.cursor = cursorStyleOfWrapperElement; // eslint-disable-line no-param-reassign\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement, i) => {\n        child.style.cursor = cursorStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n      }\n    );\n\n    if (isDraggingConfirmed) {\n      callbackMomentum();\n    }\n  };\n\n  const onMouseMove = (e: MouseEvent) => {\n    if (!internalState.current.isMouseDown) {\n      return;\n    }\n\n    e.preventDefault();\n\n    const dx = internalState.current.lastMouseX - e.clientX;\n    internalState.current.lastMouseX = e.clientX;\n\n    internalState.current.scrollSpeedX = dx / timing;\n    internalState.current.isDraggingX = true;\n\n    const dy = internalState.current.lastMouseY - e.clientY;\n    internalState.current.lastMouseY = e.clientY;\n\n    internalState.current.scrollSpeedY = dy / timing;\n    internalState.current.isDraggingY = true;\n\n    ref.current.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement) => {\n        child.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n      }\n    );\n\n    const isAtLeft = ref.current.scrollLeft <= 0 && isScrollableAlongX;\n    const isAtRight =\n      ref.current.scrollLeft >= maxHorizontalScroll && isScrollableAlongX;\n    const isAtTop = ref.current.scrollTop <= 0 && isScrollableAlongY;\n    const isAtBottom =\n      ref.current.scrollTop >= maxVerticalScroll && isScrollableAlongY;\n    const isAtAnEdge = isAtLeft || isAtRight || isAtTop || isAtBottom;\n\n    if (isAtAnEdge && applyRubberBandEffect) {\n      rubberBandCallback(e);\n    }\n\n    runScroll();\n  };\n\n  const handleResize = () => {\n    maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth;\n    maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight;\n  };\n\n  useEffect(() => {\n    if (isMounted) {\n      window.addEventListener(\"mouseup\", onMouseUp);\n      window.addEventListener(\"mousemove\", onMouseMove);\n      window.addEventListener(\"resize\", handleResize);\n    }\n    return () => {\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"resize\", handleResize);\n\n      clearInterval(keepMovingX);\n      clearInterval(keepMovingY);\n      clearTimeout(rubberBandAnimationTimer);\n    };\n  }, [isMounted]);\n\n  return {\n    events: {\n      onMouseDown,\n    },\n  };\n}\n"],"names":["useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","ref","cursorStyleOfWrapperElement","cursorStyleOfChildElements","transformStyleOfChildElements","transitionStyleOfChildElements","decayRate","safeDisplacement","applyRubberBandEffect","activeMouseButton","isMounted","internalState","useRef","isMouseDown","isDraggingX","isDraggingY","initialMouseX","initialMouseY","lastMouseX","lastMouseY","scrollSpeedX","scrollSpeedY","lastScrollX","lastScrollY","isScrollableAlongX","isScrollableAlongY","maxHorizontalScroll","maxVerticalScroll","timing","getComputedStyle","current","overflowX","overflowY","scrollWidth","clientWidth","scrollHeight","clientHeight","cursor","childNodes","forEach","child","push","transform","transition","rubberBandAnimationTimer","keepMovingX","keepMovingY","runScroll","offsetX","scrollLeft","offsetY","scrollTop","recoverChildStyle","i","style","preventClick","e","preventDefault","stopImmediatePropagation","onMouseUp","isDragging","dy","clientY","isMotionIntentional","Math","abs","clientX","isDraggingConfirmed","addEventListener","removeEventListener","setInterval","newScrollSpeedX","hasReachedHorizontalEdges","clearInterval","newScrollSpeedY","hasReachedVerticalEdges","setTimeout","onMouseMove","dx","displacementX","displacementY","sign","log10","rubberBandCallback","handleResize","clearTimeout","events","onMouseDown","buttonsCode","buttons"],"mappings":"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"}